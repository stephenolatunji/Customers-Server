trigger:
- master

resources:
  repositories:
  - repository: appsectemplates
    type: git
    name: DevSecOps/DevSecOps

variables:
  dockerRegistryServiceConnection: 'ACR-Dev'
  imageRepository: 'dmscustomerservice'
  dockerfilePath: '**/Dockerfile'
  tag: 'latest'
  # imagePullSecret: 'dmsacr13785139-auth'
  vmImageName: 'ubuntu-latest'
  sonarName: 'DMS-CustomerService'
  ACR: 'microservicesacrafrdev.azurecr.io'
  checkmarxTeam: '/CxServer/AB-InBev/AFR/DMS'
  imagePullSecret: 'dms-customerservice'


stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
#     steps:

#     - checkout: self
#     - checkout: appsectemplates

#     - task: Npm@1
#       inputs:
#         command: 'install'
#         #workingDir: '.'
#         workingDir: './$(Build.Repository.Name)'

#     - task: Docker@2
#       displayName: Build #and push an image to container registry
#       inputs:
#         command: build #AndPush
#         repository: $(imageRepository)
#         dockerfile: $(dockerfilePath)
#         containerRegistry: $(dockerRegistryServiceConnection)
#         arguments: --build-arg COMPANY_USER=$(USER) --build-arg COMPANY_HOST=$(HOST) --build-arg COMPANY_DB=$(DB) --build-arg COMPANY_PASSWORD=$(PASSWORD) --build-arg COMPANY_JWT=$(JWT_SECRET)
#         tags: |
#           $(tag)
          

#     - template: pipeline_templates/Security_tasks/prepareSonarCloud.yml@appsectemplates
#       parameters:
#         SCServiceConnection: 'SonarcloudServer'
#         SCProjectKey: $(sonarName) 
#         SCProjectName: $(sonarName) 
#         SCBranchName: '$(Build.SourceBranchName)'
#         SCBaseDirPath: './$(Build.Repository.Name)'

#     - template: pipeline_templates/secure_code_scan.yml@appsectemplates
#       parameters:
        
#         scanSonarCloud: true
#         sonarCloudGate: false
#         SCServiceConnection: 'SonarcloudServer'

#         scanSnyk: true
#         SKFailOnIssues: false
#         SkServiceConnection: 'SnykServer'
#         SkOrganization: '6faff7dd-4e52-4ac6-af3c-a5d1eaa27be2'
#         SkAdditionalArgs: '--all-projects --detection-depth=4'
        
#         scanGitleaks: true

#         scanSnykContainer: true
#         SkDockerImageName: '$(ACR)/$(imageRepository):$(tag)'
#         SkDockerFilePath: './$(Build.Repository.Name)/Dockerfile'

#         scanCheckmarx: true
#         CxServiceConnection: 'CheckmarxServer'
#         CxPreset: 'ASA_SDLC_Ready'
#         CxEnableSyncScan: false
#         CxEnableThreshold: false
#         CxTeamName: $(checkmarxTeam)


- stage: Deploy
  displayName: Deploystage
  # dependsOn:
  # - Build
  pool:
    name: 'AFR_Non_Prod_Self_hosted_Pool'
    demands: 
    - agent.os -equals Linux
  jobs:
  - job: 'ACR_Deploy'
    displayName: 'ACR Deploy'
    steps:
    - checkout: self

    - task: CmdLine@2
      inputs:
        script: |
          pwd
          cd $(Agent.BuildDirectory)
          pwd

    - task: Docker@2
      displayName: Build
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        arguments: --build-arg COMPANY_USER=$(USER) --build-arg COMPANY_HOST=$(HOST) --build-arg COMPANY_DB=$(DB) --build-arg COMPANY_PASSWORD=$(PASSWORD) --build-arg COMPANY_JWT=$(JWT_SECRET)
        tags: |
            $(tag)
      
    - task: Docker@2
      displayName: Push
      inputs:
          command: push
          repository: $(imageRepository)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)
  

          # - task: Kubernetes@1
          #   inputs:
          #     connectionType: 'Azure Resource Manager'
          #     azureSubscriptionEndpoint: 'AFR_Microservices_Azure_Non_Prod-AFR_WEB_Distributor Management System (DMS)'
          #     azureResourceGroup: 'microservices-RG-Africa-Dev'
          #     kubernetesCluster: 'microservices-AKS-afr-dev'
          #     useClusterAdmin: true
          #     namespace: 'bees-hive'
          #     command: 'apply'
          #     arguments: '-f manifests/deployment.yml -f manifests/service.yml'
          #     secretType: 'dockerRegistry'
          #     containerRegistryType: 'Azure Container Registry'
          #     azureSubscriptionEndpointForSecrets: 'AFR_Microservices_Azure_Non_Prod-AFR_WEB_Distributor Management System (DMS)'
          #     azureContainerRegistry: 'microservicesacrafrdev.azurecr.io'
          #     secretName: '$(imagePullSecret)'
          
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'AFR DEV-AFR_WEB_Distributor Management System (DMS)'
        namespace: 'dms'
        manifests: |
          manifests/deployment.yml 
          manifests/service.yml


